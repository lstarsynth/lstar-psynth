// mux-array.txt
// We model this protocol as described in "Reachability Sets of
// Parametrized Rings As Regular Languages" by Laurent Fribourg and Hans Olsen.
//
// In a MUX-array, each state of an array component is a couple of the form qXY,
// where X is 0, 1 or 2 (0 stands for `idle', 1 for `waiting', 2 for `in critical section'),
// Y is 0 or 1 (0 stands for `empty', 1 for `with token').

// at least two processes at beginning
Initial {
    init: s0;

    s0 -> s1 q01;
    s1 -> s2 q00;
    s2 -> s2 q00;

    accepting: s2;
}

closedUnderTransitions;

Transition {
    init: s0;

    s0 -> r1;

    // change from idle to waiting
    r1 -> r1 q00/q00;
    r1 -> r1 q01/q01;
    r1 -> r1 q10/q10;
    r1 -> r1 q11/q11;
    r1 -> r1 q20/q20;
    r1 -> r1 q21/q21;
    r1 -> t1 q00/q10;
    r1 -> t1 q01/q11;
    t1 -> t1 q00/q00;
    t1 -> t1 q01/q01;
    t1 -> t1 q10/q10;
    t1 -> t1 q11/q11;
    t1 -> t1 q20/q20;
    t1 -> t1 q21/q21;

    s0 -> r2;

    // change from CS to idle
    r2 -> r2 q00/q00;
    r2 -> r2 q01/q01;
    r2 -> r2 q10/q10;
    r2 -> r2 q11/q11;
    r2 -> r2 q20/q20;
    r2 -> r2 q21/q21;
    r2 -> t1 q20/q00;
    r2 -> t1 q21/q01;

    s0 -> r3;

    // change from waiting to CS
    r3 -> r3 q00/q00;
    r3 -> r3 q01/q01;
    r3 -> r3 q10/q10;
    r3 -> r3 q11/q11;
    r3 -> r3 q20/q20;
    r3 -> r3 q21/q21;
    r3 -> t1 q11/q21;

    s0 -> r4;

    // pass token from an idle process to a waiting process
    r4 -> r4 q00/q00;
    r4 -> r4 q01/q01;
    r4 -> r4 q10/q10;
    r4 -> r4 q11/q11;
    r4 -> r4 q20/q20;
    r4 -> r4 q21/q21;
    r4 -> t2 q01/q00;
    t2 -> t1 q10/q11;

    accepting: t1;
}

// two processes in the CS at the same time
Bad {
    init: s0;

    s0 -> s0 q00;
    s0 -> s0 q01;
    s0 -> s0 q10;
    s0 -> s0 q11;
    s0 -> s1 q20;
    s0 -> s1 q21;

    s1 -> s1 q00;
    s1 -> s1 q01;
    s1 -> s1 q10;
    s1 -> s1 q11;
    s1 -> s2 q20;
    s1 -> s2 q21;

    s2 -> s2 q00;
    s2 -> s2 q01;
    s2 -> s2 q10;
    s2 -> s2 q11;
    s2 -> s2 q20;
    s2 -> s2 q21;

    accepting: s2;
}

monolithicWitness;

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;

