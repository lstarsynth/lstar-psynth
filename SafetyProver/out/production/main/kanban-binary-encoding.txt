// kanban-binary-encoding.txt
//
// This example models the Kanban production system as described at
// http://www.ulb.ac.be//di/ssd/ggeeraer/eec/
// The integer variables are encoded in binary.
 
// x0 = 0, x1 = 0, x2 >= 1, x3 = 0, x4 = 0, x5 = 0,
// x6 >= 1, x7 = 0, x8 = 0, x9 = 0, x10 >= 1,
// x11 = 0, x12 = 0, x13 = 0, x14 >= 1, x15 = 0

Initial {
    init: s0;
    s0 -> s0 0;
    s0 -> s1 2;
    s1 -> s1 0;
    s1 -> s2 2;
    s2 -> s2 0;
    s2 -> t2 1;
    t2 -> t2 1;
    t2 -> t2 0;
    t2 -> s3 2;
    s3 -> s3 0;
    s3 -> s4 2;
    s4 -> s4 0;
    s4 -> s5 2;
    s5 -> s5 0;
    s5 -> s6 2;
    s6 -> s6 0;
    s6 -> t6 1;
    t6 -> t6 1;
    t6 -> t6 0;
    t6 -> s7 2;
    s7 -> s7 0;
    s7 -> s8 2;
    s8 -> s8 0;
    s8 -> s9 2;
    s9 -> s9 0;
    s9 -> s10 2;
    s10 -> s10 0;
    s10 -> t10 1;
    t10 -> t10 1;
    t10 -> t10 0;
    t10 -> s11 2;
    s11 -> s11 0;
    s11 -> s12 2;
    s12 -> s12 0;
    s12 -> s13 2;
    s13 -> s13 0;
    s13 -> s14 2;
    s14 -> s14 0;
    s14 -> t14 1;
    t14 -> t14 1;
    t14 -> t14 0;
    t14 -> s15 2;
    s15 -> s15 0;
    s15 -> s16 2;

    accepting: s16;
}

closedUnderTransitions;

Transition {
    init: s0;
    s0 -> s0 1/1;
    s0 -> s0 0/0;
    s0 -> s1 2/2;
    s1 -> s1 1/1;
    s1 -> s1 0/0;
    s1 -> s2 2/2;
    s2 -> s2 1/1;
    s2 -> s2 0/0;
    s2 -> s3 2/2;
    s3 -> s3 1/1;
    s3 -> s3 0/0;
    s3 -> s4 2/2;
    s4 -> s4 1/1;
    s4 -> s4 0/0;
    s4 -> s5 2/2;
    s5 -> s5 1/1;
    s5 -> s5 0/0;
    s5 -> s6 2/2;
    s6 -> s6 1/1;
    s6 -> s6 0/0;
    s6 -> s7 2/2;
    s7 -> s7 1/1;
    s7 -> s7 0/0;
    s7 -> s8 2/2;
    s8 -> s8 1/1;
    s8 -> s8 0/0;
    s8 -> s9 2/2;
    s9 -> s9 1/1;
    s9 -> s9 0/0;
    s9 -> s10 2/2;
    s10 -> s10 1/1;
    s10 -> s10 0/0;
    s10 -> s11 2/2;
    s11 -> s11 1/1;
    s11 -> s11 0/0;
    s11 -> s12 2/2;
    s12 -> s12 1/1;
    s12 -> s12 0/0;
    s12 -> s13 2/2;
    s13 -> s13 1/1;
    s13 -> s13 0/0;
    s13 -> s14 2/2;
    s14 -> s14 1/1;
    s14 -> s14 0/0;
    s14 -> s15 2/2;
    s15 -> s15 1/1;
    s15 -> s15 0/0;
    s15 -> s16 2/2;

    // x2 >= 1 -> x0' = x0+1, x2' = x2-1;
    s0 -> y0;
    y0 -> z0 0/1;
    y0 -> y0c 1/0;
    y0c -> y0c 1/0;
    y0c -> z0 0/1;
    z0 -> z0 0/0;
    z0 -> z0 1/1;
    z0 -> y1 2/2;
    y1 -> y1 0/0;
    y1 -> y1 1/1;
    y1 -> y2 2/2;
    y2 -> z2 1/0;
    y2 -> y2b 0/1;
    y2b -> y2b 0/1;
    y2b -> z2 1/0;
    z2 -> z2 0/0;
    z2 -> z2 1/1;
    z2 -> s3 2/2;

    // x0 >= 1 -> x0' = x0-1, x1' = x1+1;
    s0 -> a0;
    a0 -> b0 1/0;
    a0 -> a0b 0/1;
    a0b -> a0b 0/1;
    a0b -> b0 1/0;
    b0 -> b0 0/0;
    b0 -> b0 1/1;
    b0 -> a1 2/2;
    a1 -> b1 0/1;
    a1 -> a1c 1/0;
    a1c -> a1c 1/0;
    a1c -> b1 0/1;
    b1 -> b1 0/0;
    b1 -> b1 1/1;
    b1 -> s2 2/2;

    // x1 >= 1 -> x0' = x0+1, x1' = x1-1;
    z0 -> c1 2/2;
    c1 -> d1 1/0;
    c1 -> c1b 0/1;
    c1b -> c1b 0/1;
    c1b -> d1 1/0;
    d1 -> d1 0/0;
    d1 -> d1 1/1;
    d1 -> s2 2/2;

    // x0 >= 1 -> x0' = x0-1, x3' = x3+1;
    b0 -> f1 2/2;
    f1 -> f1 1/1;
    f1 -> f1 0/0;
    f1 -> f2 2/2;
    f2 -> f2 1/1;
    f2 -> f2 0/0;
    f2 -> f3 2/2;
    f3 -> e3 0/1;
    f3 -> f3c 1/0;
    f3c -> f3c 1/0;
    f3c -> e3 0/1;
    e3 -> e3 1/1;
    e3 -> e3 0/0;
    e3 -> s4 2/2;

    // x3 >= 1, x6 >= 1, x10 >= 1 ->
    //    x2' = x2+1, x3' = x3-1, x4' = x4+1, x6' = x6-1, x8' = x8+1, x10' = x10-1;
    s1 -> g2 2/2;
    g2 -> h2 0/1;
    g2 -> g2c 1/0;
    g2c -> g2c 1/0;
    g2c -> h2 0/1;
    h2 -> h2 1/1;
    h2 -> h2 0/0;
    h2 -> g3 2/2;
    g3 -> h3 1/0;
    g3 -> g3b 0/1;
    g3b -> g3b 0/1;
    g3b -> h3 1/0;
    h3 -> h3 1/1;
    h3 -> h3 0/0;
    h3 -> g4 2/2;
    g4 -> h4 0/1;
    g4 -> g4c 1/0;
    g4c -> g4c 1/0;
    g4c -> h4 0/1;
    h4 -> h4 1/1;
    h4 -> h4 0/0;
    h4 -> g5 2/2;
    g5 -> g5 1/1;
    g5 -> g5 0/0;
    g5 -> g6 2/2;
    g6 -> h6 1/0;
    g6 -> g6b 0/1;
    g6b -> g6b 0/1;
    g6b -> h6 1/0;
    h6 -> h6 1/1;
    h6 -> h6 0/0;
    h6 -> g7 2/2;
    g7 -> g7 1/1;
    g7 -> g7 0/0;
    g7 -> g8 2/2;
    g8 -> h8 0/1;
    g8 -> g8c 1/0;
    g8c -> g8c 1/0;
    g8c -> h8 0/1;
    h8 -> h8 1/1;
    h8 -> h8 0/0;
    h8 -> g9 2/2;
    g9 -> g9 1/1;
    g9 -> g9 0/0;
    g9 -> g10 2/2;    
    g10 -> h10 1/0;
    g10 -> g10b 0/1;
    g10b -> g10b 0/1;
    g10b -> h10 1/0;
    h10 -> h10 1/1;
    h10 -> h10 0/0;
    h10 -> s11 2/2;

    // x4 >= 1 -> x4' = x4-1, x5' = x5+1;
    s3 -> i4 2/2;
    i4 -> j4 1/0;
    i4 -> i4b 0/1;
    i4b -> i4b 0/1;
    i4b -> j4 1/0;
    j4 -> j4 1/1;
    j4 -> j4 0/0;
    j4 -> i5 2/2;
    i5 -> j5 0/1;
    i5 -> i5c 1/0;
    i5c -> i5c 1/0;
    i5c -> j5 0/1;
    j5 -> j5 1/1;
    j5 -> j5 0/0;
    j5 -> s6 2/2;

    // x5 >= 1 -> x4' = x4+1, x5' = x5-1;
    s3 -> k4 2/2;
    k4 -> l4 0/1;
    k4 -> k4c 1/0;
    k4c -> k4c 1/0;
    k4c -> l4 0/1;
    l4 -> l4 1/1;
    l4 -> l4 0/0;
    l4 -> k5 2/2;
    k5 -> l5 1/0;
    k5 -> k5b 0/1;
    k5b -> k5b 0/1;
    k5b -> l5 1/0;
    l5 -> l5 1/1;
    l5 -> l5 0/0;
    l5 -> s6 2/2;

    // x4 >= 1 -> x4' = x4-1, x7' = x7+1;
    j4 -> m5 2/2;
    m5 -> m5 1/1;
    m5 -> m5 0/0;
    m5 -> m6 2/2;
    m6 -> m6 1/1;
    m6 -> m6 0/0;
    m6 -> m7 2/2;
    m7 -> n7 0/1;
    m7 -> m7c 1/0;
    m7c -> m7c 1/0;
    m7c -> n7 0/1;
    n7 -> n7 1/1;
    n7 -> n7 0/0;
    n7 -> s8 2/2;

    // x7 >= 1, x11 >= 1, x14 >= 1 ->
    //    x6' = x6+1, x7' = x7-1, x10' = x10+1, x11' = x11-1, x12' = x12+1, x14' = x14-1;
    s5 -> o6 2/2;
    o6 -> p6 0/1;
    o6 -> o6c 1/0;
    o6c -> o6c 1/0;
    o6c -> p6 0/1;
    p6 -> p6 1/1;
    p6 -> p6 0/0;
    p6 -> o7 2/2;
    o7 -> p7 1/0;
    o7 -> o7b 0/1;
    o7b -> o7b 0/1;
    o7b -> p7 1/0;
    p7 -> p7 1/1;
    p7 -> p7 0/0;
    p7 -> o8 2/2;
    o8 -> o8 1/1;
    o8 -> o8 0/0;
    o8 -> o9 2/2;
    o9 -> o9 1/1;
    o9 -> o9 0/0;
    o9 -> o10 2/2;
    o10 -> p10 0/1;
    o10 -> o10c 1/0;
    o10c -> o10c 1/0;
    o10c -> p10 0/1;
    p10 -> p10 1/1;
    p10 -> p10 0/0;
    p10 -> o11 2/2;
    o11 -> p11 1/0;
    o11 -> o11b 0/1;
    o11b -> o11b 0/1;
    o11b -> p11 1/0;
    p11 -> p11 1/1;
    p11 -> p11 0/0;
    p11 -> o12 2/2;
    o12 -> p12 0/1;
    o12 -> o12c 1/0;
    o12c -> o12c 1/0;
    o12c -> p12 0/1;
    p12 -> p12 1/1;
    p12 -> p12 0/0;
    p12 -> o13 2/2;
    o13 -> o13 1/1;
    o13 -> o13 0/0;
    o13 -> o14 2/2;
    o14 -> p14 1/0;
    o14 -> o14b 0/1;
    o14b -> o14b 0/1;
    o14b -> p14 1/0;
    p14 -> p14 1/1;
    p14 -> p14 0/0;
    p14 -> s15 2/2;

    // x8 >= 1 -> x8' = x8-1, x9' = x9+1;
    s7 -> q8 2/2;
    q8 -> r8 1/0;
    q8 -> q8b 0/1;
    q8b -> q8b 0/1;
    q8b -> r8 1/0;
    r8 -> r8 1/1;
    r8 -> r8 0/0;
    r8 -> q9 2/2;
    q9 -> r9 0/1;
    q9 -> q9c 1/0;
    q9c -> q9c 1/0;
    q9c -> r9 0/1;
    r9 -> r9 1/1;
    r9 -> r9 0/0;
    r9 -> s10 2/2;

    // x9 >= 1 -> x8' = x8+1, x9' = x9-1;
    s7 -> u8 2/2;
    u8 -> v8 0/1;
    u8 -> u8c 1/0;
    u8c -> u8c 1/0;
    u8c -> v8 0/1;
    v8 -> v8 1/1;
    v8 -> v8 0/0;
    v8 -> u9 2/2;
    u9 -> v9 1/0;
    u9 -> u9b 0/1;
    u9b -> u9b 0/1;
    u9b -> v9 1/0;
    v9 -> v9 1/1;
    v9 -> v9 0/0;
    v9 -> s10 2/2;

    // x8 >= 1 -> x8' = x8-1, x11' = x11+1;
    r8 -> w9 2/2;
    w9 -> w9 1/1;
    w9 -> w9 0/0;
    w9 -> w10 2/2;
    w10 -> w10 1/1;
    w10 -> x10 0/0;
    w10 -> w11 2/2;
    w11 -> x11 0/1;
    w11 -> w11c 1/0;
    w11c -> w11c 1/0;
    w11c -> x11 0/1;
    x11 -> x11 1/1;
    x11 -> x11 0/0;
    x11 -> s11 2/2;

    // x12 >= 1 -> x12' = x12-1, x13' = x13+1;
    s11 -> a12 2/2;
    a12 -> b12 1/0;
    a12 -> a12b 0/1;
    a12b -> a12b 0/1;
    a12b -> b12 1/0;
    b12 -> b12 1/1;
    b12 -> b12 0/0;
    b12 -> a13 2/2;
    a13 -> b13 0/1;
    a13 -> a13c 1/0;
    a13c -> a13c 1/0;
    a13c -> b13 0/1;
    b13 -> b13 1/1;
    b13 -> b13 0/0;
    b13 -> s14 2/2;

    // x13 >= 1 -> x12' = x12+1, x13' = x13-1;
    s11 -> c12 2/2;
    c12 -> d12 0/1;
    c12 -> c12c 1/0;
    c12c -> c12c 1/0;
    c12c -> d12 0/1;
    d12 -> d12 1/1;
    d12 -> d12 0/0;
    d12 -> c13 2/2;
    c13 -> d13 1/0;
    c13 -> c13b 0/1;
    c13b -> c13b 0/1;
    c13b -> d13 1/0;
    d13 -> d13 1/1;
    d13 -> d13 0/0;
    d13 -> s14 2/2;

    // x12 >= 1 -> x12' = x12-1, x15' = x15+1;
    b12 -> e13 2/2;
    e13 -> e13 1/1;
    e13 -> e13 0/0;
    e13 -> e14 2/2;
    e14 -> e14 1/1;
    e14 -> e14 0/0;
    e14 -> e15 2/2;
    e15 -> f15 0/1;
    e15 -> e15c 1/0;
    e15c -> e15c 1/0;
    e15c -> f15 0/1;
    f15 -> f15 1/1;
    f15 -> f15 0/0;
    f15 -> s16 2/2;

    // x15 >= 1 -> x14' = x14+1, x15' = x15-1;
    s13 -> g14 2/2;
    g14 -> h14 0/1;
    g14 -> g14c 1/0;
    g14c -> g14c 1/0;
    g14c -> h14 0/1;
    h14 -> h14 1/1;
    h14 -> h14 0/0;
    h14 -> g15 2/2;
    g15 -> h15 1/0;
    g15 -> g15b 0/1;
    g15b -> g15b 0/1;
    g15b -> h15 1/0;
    h15 -> h15 1/1;
    h15 -> h15 0/0;
    h15 -> s16 2/2;

    accepting: s16;
}

// x4 >= 2, x6 >= 4, x10 >= 4, x13 >= 8, x14 >= 4
Bad {
    init: s0;
    s0 -> s0 0;
    s0 -> s0 1;
    s0 -> s1 2;
    s1 -> s1 0;
    s1 -> s1 1;
    s1 -> s2 2;
    s2 -> s2 0;
    s2 -> s2 1;
    s2 -> s3 2;
    s3 -> s3 0;
    s3 -> s3 1;
    s3 -> s4 2;
    s4 -> t4 0;
    s4 -> t4 1;
    t4 -> u4 0;
    t4 -> u4 1;
    u4 -> v4 0;
    u4 -> v4 1;
    v4 -> v4 0;
    v4 -> w4 1;
    w4 -> w4 0;
    w4 -> w4 1;
    w4 -> s5 2;
    s5 -> s5 0;
    s5 -> s5 1;
    s5 -> s6 2;
    s6 -> t6 0;
    s6 -> t6 1;
    t6 -> u6 0;
    t6 -> u6 1;
    u6 -> u6 0;
    u6 -> w6 1;
    w6 -> w6 0;
    w6 -> w6 1;
    w6 -> s7 2;
    s7 -> s7 0;
    s7 -> s7 1;
    s7 -> s8 2;
    s8 -> s8 0;
    s8 -> s8 1;
    s8 -> s9 2;
    s9 -> s9 0;
    s9 -> s9 1;
    s9 -> s10 2;
    s10 -> t10 0;
    s10 -> t10 1;
    t10 -> u10 0;
    t10 -> u10 1;
    u10 -> u10 0;
    u10 -> w10 1;
    w10 -> w10 0;
    w10 -> w10 1;
    w10 -> s11 2;
    s11 -> s11 0;
    s11 -> s11 1;
    s11 -> s12 2;
    s12 -> s12 0;
    s12 -> s12 1;
    s12 -> s13 2;    
    s13 -> t13 1;
    t13 -> u13 1;
    u13 -> v13 1;
    v13 -> w13 1;
    w13 -> x13 1;
    x13 -> y13 1;
    y13 -> y13 1;
    y13 -> y13 0;    
    y13 -> s14 2;
    s14 -> t14 0;
    s14 -> t14 1;
    t14 -> u14 0;
    t14 -> u14 1;
    u14 -> u14 0;
    u14 -> w14 1;
    w14 -> w14 0;
    w14 -> w14 1;
    w14 -> s15 2;
    s15 -> s15 0;
    s15 -> s15 1;
    s15 -> s16 2;

    accepting: s16;
}

monolithicWitness;

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;