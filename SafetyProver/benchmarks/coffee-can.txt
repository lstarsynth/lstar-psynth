// coffee-can.txt
// This example models David Gries's coffee can problem as described in
// "Regular Symmetry Patterns".
//
// Each configuration has form {Even,Odd}W*0*B*1*, where
// the first character indicates the parity of the number of white beans
// at the beginning, and the numbers of Ws and Bs correspond to the
// numbers of white and black beans, respectively, in the current can.

Initial {
    init: s0;

    s0 -> q0 Odd;
    q0 -> q1 W;
    q1 -> q0 W;
    q0 -> q2 W;
    q2 -> q2 0;
    q2 -> s1;
    s1 -> s1 B;
    s1 -> s2;
    s2 -> s2 1;

    s0 -> r0 Even;
    r0 -> r1 W;
    r1 -> r0 W;
    r0 -> q2;

    accepting: s1, s2;
}

closedUnderTransitions;

// Rule 1: if B ≥ 2, then B := B − 1 and W := W
// Rule 2: if W ≥ 2, then B := B + 1 and W := W − 2
// Rule 3: if B ≥ 1 and W ≥ 1, then B := B − 1 and W := W
Transition {
    init: s0;

    s0 -> s1 Even/Even;
    s0 -> s1 Odd/Odd;

    // Rule 1
    s1 -> r0;
    r0 -> r0 W/W;
    r0 -> r0 0/0;
    r0 -> r0 B/B;
    r0 -> r1 B/B;
    r1 -> r2 B/1;
    r2 -> r2 1/1;

    // Rule 2
    s1 -> q0;
    q0 -> q0 W/W;
    q0 -> q1 W/0;
    q1 -> q3 W/0;
    q3 -> q3 0/0;
    q3 -> q3 B/B;
    q3 -> q2 1/B;
    q2 -> q2 1/1;

    // Rule 3
    s1 -> t0;
    t0 -> t0 W/W;
    t0 -> t1 W/W;
    t1 -> t1 0/0;
    t1 -> t1 B/B;
    t1 -> t2 B/1;
    t2 -> t2 1/1;

    accepting: r2, q2, t2;
}

// The last bean in the can is white iff the number of white beans
// is odd at the beginning. Hence, the set of bad states is defined as
// the union of the following two sets:
// (a) the last bean is white & the initial number of white coffee is even
// (b) the last bean is black & the initial number of white coffee is odd
Bad {
    init: s0;

    s0 -> r0 Even;
    r0 -> s1 W;
    s1 -> s1 0;
    s1 -> s2;
    s2 -> s2 1;

    s0 -> q0 Odd;
    q0 -> q0 0;
    q0 -> s2 B;

    accepting: s1, s2;
}

monolithicWitness;

transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;