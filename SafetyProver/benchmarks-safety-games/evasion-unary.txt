// follow game
Initial {
    init: si;

    si -> s0 11;
    s0 -> s1 11;
    s1 -> s1 11;
    s1 -> s11 01;
    s11 -> s11 01;
    s11 -> s2 P;
    s2 -> s3 11;
    s3 -> s3 11;
    s3 -> s33 01;
    s33 -> s33 01;
    accepting: s33;
}    

Transition {
    init: si;
    // determine player turn
    si -> smovepre 00/11;
    si -> smovepre 11/00;
    // player moves right
    smovepre -> smove 11/11;
    smove -> smoveR1 01/11;
    smove -> smoveR0 00/10;
// carry right
    smove -> smoveRover 00/10;
    smove -> smoveRover 01/11;
    smoveRover -> smoveRover 00/10;
    smoveRover -> smoveRover 01/11;
    smoveRover -> smoveYdone P/P;

    smoveR0 -> smoveR0 00/00;
    smoveR0 -> smoveYdone P/P;
    smoveR1 -> smoveR1 01/01;
    smoveR1 -> smoveR1 00/00;
    smoveR1 -> smoveYdone P/P;

    smoveYdone -> smoveYdone1 11/11;
    smoveYdone1 -> smoveYdone1 11/11;
    smoveYdone1 -> smoveYdone0 00/00;
    smoveYdone0 -> smoveYdone0 00/00;
    smoveYdone1 -> smoveYdone10 10/10;
    smoveYdone10 -> smoveYdone10 10/10;
    smoveYdone10 -> smoveYdone0;
    smoveYdone1 -> smoveYdone01 01/01;
    smoveYdone01 -> smoveYdone01 01/01;
    smoveYdone1 -> smoveYdone0;

    // player moves left
    smove -> smoveL1 11/01;
    smove -> smoveL0 10/00;

    smoveL0 -> smoveL0 00/00;
    smoveL0 -> smoveYdone P/P;
    smoveL1 -> smoveL1 01/01;
    smoveL1 -> smoveL1 00/00;
    smoveL1 -> smoveYdone P/P;
    // carry left
    smove -> smoveLover 10/00;
    smove -> smoveLover 11/01;
    smoveLover -> smoveLover 10/00;
    smoveLover -> smoveLover 11/01;
    smoveLover -> smoveYdone P/P;

    // player moves up
    smove -> smoveXdone 11/11;
    smoveXdone -> smoveXdone 11/11;
    smoveXdone -> smoveXdone 00/00;
    smoveXdone -> smoveXdone 01/01;
    smoveXdone -> smoveXdone 10/10;
    smoveXdone -> smoveU P/P;
    smoveU -> smoveU 11/11;
    smoveU -> smoveU1 01/11;
    smoveU -> smoveU0 00/10;

    smoveU0 -> smoveU0 00/00;
    smoveU1 -> smoveU1 01/01;
    smoveU1 -> smoveU1 00/00;
// carry up
    smoveU -> smoveUover 00/10;
    smoveU -> smoveUover 01/11;
    smoveUover -> smoveUover 00/10;
    smoveUover -> smoveUover 01/11;

    // player moves down
    smove -> smoveXdone 11/11;
    smoveXdone -> smoveXdone 11/11;
    smoveXdone -> smoveXdone 00/00;
    smoveXdone -> smoveXdone 01/01;
    smoveXdone -> smoveXdone 10/10;
    smoveXdone -> smoveXdone1 P/P;
    smoveXdone1 -> smoveD 11/11;
    smoveD -> smoveD 11/11;
    smoveD -> smoveD1 11/01;
    smoveD -> smoveD0 10/00;

    smoveD0 -> smoveD0 00/00;
    smoveD1 -> smoveD1 01/01;
    smoveD1 -> smoveD1 00/00;
// carry down
    smoveD -> smoveDover 10/00;
    smoveD -> smoveDover 11/01;
    smoveDover -> smoveDover 10/00;
    smoveDover -> smoveDover 11/01;
    // player stay

    accepting: smoveD0,smoveD1,smoveU0,smoveU1,smoveYdone0,smoveUover,smoveDover;
}

Bad {
  init: s0;
  s0 -> s1 11;
  s0 -> s1 00;
  s1 -> s2 11;
  s2 -> s2 11;
  s2 -> s2 00;
  s2 -> s3 P;
  s3 -> s4 11;
  s4 -> s4 11;
  s4 -> s4 00;
  accepting: s4;
}

P0 {
    init: si;

    si -> s1 00;
    s1 -> s1 00;
    s1 -> s1 10;
    s1 -> s1 01;
    s1 -> s1 11;
    s1 -> s2 P;
    s2 -> s2 00;
    s2 -> s2 10;
    s2 -> s2 01;
    s2 -> s2 11;
    accepting: s2;

}

P1 {
    init: si;

    si -> s1 11;
    s1 -> s1 00;
    s1 -> s1 10;
    s1 -> s1 01;
    s1 -> s1 11;
    s1 -> s2 P;
    s2 -> s2 00;
    s2 -> s2 10;
    s2 -> s2 01;
    s2 -> s2 11;
    accepting: s2;

}



transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;
