// chomp.txt
//
// One example of this is the Chomp game by David Gale.
// The game is a two-player strategy game which is played with a chocolate bar. 
// A move of a player is picking one block of the chocolate bar and eating all blocks above and right of it (including the chosen block).
// This version looks at chocolate bars of size 4xn.

Initial {
    init: si;

    si -> s0 S;
    s0 -> s1 4;
    s1 -> s1 4;
    s1 -> s2 0;

    accepting: s2;
}    

Transition {
    init: si;
    // P1 transitions
    si -> ss E/S;
    si -> sl E/E;
    // P0 transitions
    si -> ss S/E;
    si -> sl S/S;
    // Winning/Losing turn
    sl -> s0 0/0; 
    sl -> s0 1/0;
    sl -> s0 2/0;
    sl -> s0 3/0;
    sl -> s0 4/0;    
    // go to self loop state if 0 is read first
    s0 -> s0 0/0;
    s0 -> s0 1/0;
    s0 -> s0 2/0;
    s0 -> s0 3/0;
    s0 -> s0 4/0; 

    // read 1's and eventually chomp 1 to a 0 and all following 1's
    ss -> s1 1/1;
    s1 -> s1 1/1;
    s1 -> s11 1/0;
    s11 -> s11 1/0;
    s11 -> s0 0/0;

    // first 2 can be read and changed into 1 or 0
    ss -> s2 2/2;
    ss -> s21 2/1;
    s2 -> s2 2/2;
    s2 -> s1;
    // change 2 into 1
    s2 -> s21 2/1;
    // change 2 into 0
    s2 -> s20 2/0;
    s21 -> s21 2/1;
    s21 -> s211;
    s211 -> s211 1/1;
    s211 -> s0 0/0;
    s20 -> s20 2/0;
    s20 -> s11 1/0;
    s20 -> s0 0/0;

    // first 3 can be read and changed into 2, 1 or 0
    ss -> s3 3/3;
    s3 -> s3 3/3;
    s3 -> s2;
    s3 -> s1;
    // change 3 into 2
    ss -> s32 3/2;
    s3 -> s32 3/2;
    s32 -> s32 3/2;
    s32 -> s0 0/0;
    s32 -> s322;
    s322 -> s322 2/2;
    s322 -> s211;
    // change 3 into 1
    ss -> s31 3/1;
    s3 -> s31 3/1;
    s31 -> s31 3/1;
    s31 -> s211;
    s31 -> s321 2/1;
    s321 -> s321 2/1;
    s321 -> s211;
    // change 3 into 0
    s3 -> s30 3/0;
    s30 -> s30 3/0;
    s30 -> s20 2/0;
    s30 -> s11 1/0;
    s30 -> s0 0/0;
    
    // first 4 can be read and changed into 3, 2, 1 or 0
    ss -> s4 4/4;
    s4 -> s4 4/4;
    s4 -> s3;
    s3 -> s2;
    s3 -> s1;
    
    // change 4 into 3
    ss -> s43 4/3;
    s4 -> s43 4/3;
    s43 -> s43 4/3;
    s43 -> s0 0/0;
    s43 -> s433;
    s433 -> s433 3/3;
    s433 -> s322;

    // change 4 into 2
    ss -> s42 4/2;
    s4 -> s42 4/2;
    s42 -> s42 4/2;
    s42 -> s322;
    s42 -> s432 3/2;
    s432 -> s432 3/2;
    s432 -> s322;

    // change 4 into 1
    ss -> s41 4/1;
    s4 -> s41 4/1;
    s41 -> s41 4/1;
    s41 -> s211;
    s42 -> s431 3/1;
    s431 -> s431 3/1;
    s431 -> s321 2/1;

    // change 4 into 0
    s4 -> s40 4/0;
    s40 -> s40 4/0;
    s40 -> s30 3/0;
    s40 -> s20 2/0;
    s40 -> s11 1/0;
    s40 -> s0 0/0;
    accepting: s0;
}

Bad {
    init: s0;

    s0 -> s1 S;
    s1 -> s2 0;
    s2 -> s2 0;
    accepting: s2;
}

P0 {
    init: si;

    si -> s0 S;
    s0 -> s0 4;

    s0 -> s1 1;
    s0 -> s2 2;
    s0 -> s3 3;
    s0 -> s4 0;
    // after reading 1 0, only add more 0's or accept
    s4 -> s4 0; 
    // after reading 1 1, only add more 1's or go down to 0's
    s1 -> s1 1;
    s1 -> s4 0;
    // after reading 1 2, only add more 2's or go down
    s2 -> s2 2;
    s2 -> s1 1;
    s2 -> s4 0;
    // after reading 1 3, only add more 3's or go down
    s3 -> s1 1;
    s3 -> s2 2;
    s3 -> s3 3;
    s3 -> s4 0;

    accepting: s4;

}

P1 {
    init: si;

    si -> s0 E;
    s0 -> s0 4;

    s0 -> s1 1;
    s0 -> s2 2;
    s0 -> s3 3;
    s0 -> s4 0;
    // after reading 1 0, only add more 0's or accept
    s4 -> s4 0; 
    // after reading 1 1, only add more 1's or go down to 0's
    s1 -> s1 1;
    s1 -> s4 0;
    // after reading 1 2, only add more 2's or go down
    s2 -> s2 2;
    s2 -> s1 1;
    s2 -> s4 0;
    // after reading 1 3, only add more 3's or go down
    s3 -> s1 1;
    s3 -> s2 2;
    s3 -> s3 3;
    s3 -> s4 0;

    accepting: s4;

}



transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;
