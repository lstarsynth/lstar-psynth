// ressource allocation protocol
Initial {
    init: si;

    si -> s0 S;
    s0 -> s1 1i;
    s1 -> s1 0i;
    accepting: s1;
}    

Transition {
    init: si;
    si -> se E/S;
    si -> ss S/E;

    // environment can set any idle process to request

    se -> se 0i/0i;
    se -> se 1i/1i;
    se -> se 0r/0r;
    se -> se 1r/1r;
    se -> se 0i/0r;
    se -> se 1i/1r;
    
    se -> sc 1r/1c1;
    se -> sc 0c1/0c2;
    se -> sc 0c1/0c3;
    se -> sc 0c2/0c3;
    se -> sc 0c3/0i;    
    se -> sc 1c1/1c2;
    se -> sc 1c1/1c3;
    se -> sc 1c2/1c3;
    se -> sc 1c3/1i;  

    sc -> sc 0i/0i;
    sc -> sc 1i/1i;
    sc -> sc 0r/0r;
    sc -> sc 1r/1r;
    sc -> sc 0i/0r;
    sc -> sc 1i/1r;

    // system can move token to the right until it finds a request and stays at the request position
    // do not exceed modulo ring size
    ss -> ss 0i/0i;
    ss -> ss 0c1/0c1;
    ss -> ss 0c2/0c2;
    ss -> ss 0c3/0c3; 

    // current position is not idle -> move until r is found or there exists no r
    // r is found and has token -> stay
    ss -> sf 1r/1r;
    ss -> sf1 0r/0r;
    sf1 -> sf1 0r/0r;
    sf1 -> sf1 0i/0i;
    sf1 -> sf1 0c1/0c1;
    sf1 -> sf1 0c2/0c2;
    sf1 -> sf1 0c3/0c3;
    sf1 -> sf 1r/1r;
    sf -> sf 0i/0i;
    sf -> sf 0r/0r;
    sf -> sf 0c1/0c1;
    sf -> sf 0c2/0c2;
    sf -> sf 0c3/0c3; 

    // the first r we find gets the token
    ss -> sr 1i/0i;
    ss -> sr 1c1/0c1;
    ss -> sr 1c2/0c2;
    ss -> sr 1c3/0c3;

    sr -> sr 0i/0i;
    sr -> sr 0c1/0c1;
    sr -> sr 0c2/0c2;
    sr -> sr 0c3/0c3;
    sr -> sf 0r/1r;
    // skip r's that come after token but do not get it
    ss -> skipr 0r/0r;
    skipr -> skipr 0r/0r;
    skipr -> skipr 0i/0i;
    skipr -> skipr 0c1/0c1;
    skipr -> skipr 0c2/0c2;
    skipr -> skipr 0c3/0c3; 
    skipr -> sr 1i/0i;
    skipr -> sr 1c1/0c1;
    skipr -> sr 1c2/0c2;
    skipr -> sr 1c3/0c3;

    // first r gets token cos of ring property
    ss -> sleft 0r/1r;
    sleft -> sleft 0r/0r;
    sleft -> sleft 0i/0i;
    sleft -> sleft 0c1/0c1;
    sleft -> sleft 0c2/0c2;
    sleft -> sleft 0c3/0c3; 
    sleft -> sfr 1i/0i;
    sleft -> sfr 1c1/0c1;
    sleft -> sfr 1c2/0c2;
    sleft -> sfr 1c3/0c3;
    sfr -> sfr 0i/0i;
    sfr -> sfr 0c1/0c1;
    sfr -> sfr 0c2/0c2;
    sfr -> sfr 0c3/0c3; 

    // token can stay if only idle states or in critical section
    
    ss -> scrit 1c1/1c1;
    ss -> scrit 1c2/1c2;
    ss -> scrit 1c3/1c3; 
    scrit -> sf;

    // only idle states
    ss -> sidle 1i/1i;
    ss -> sidle 1c1/1c1;
    ss -> sidle 1c2/1c2;
    ss -> sidle 1c3/1c3;
    sidle -> sidle 0i/0i;
    sidle -> sidle 0c1/0c1;
    sidle -> sidle 0c2/0c2;
    sidle -> sidle 0c3/0c3;

    


    accepting: sf, sidle, sfr, sc, se;
}

Bad {
    init: s0;

    s0 -> s1 E;
    s0 -> s1 S;
    s1 -> s1 0i;
    s1 -> s1 1i;
    s1 -> s1 0r;
    s1 -> s1 1r;

    s1 -> s2 0c1;
    s1 -> s2 0c2;
    s1 -> s2 0c3;
    s1 -> s2 1c1;
    s1 -> s2 1c2;
    s1 -> s2 1c3;

    s2 -> s2 0i;
    s2 -> s2 1i;
    s2 -> s2 0r;
    s2 -> s2 1r;

    s2 -> s3 0c1;
    s2 -> s3 0c2;
    s2 -> s3 0c3;
    s2 -> s3 1c1;
    s2 -> s3 1c2;
    s2 -> s3 1c3;

    s3 -> s3 0i;
    s3 -> s3 1i;
    s3 -> s3 0r;
    s3 -> s3 1r;
    s3 -> s3 0c1;
    s3 -> s3 0c2;
    s3 -> s3 0c3;
    s3 -> s3 1c1;
    s3 -> s3 1c2;
    s3 -> s3 1c3;

    accepting: s3;
}

P0 {
    init: si;

    si -> s0 S;
    s0 -> s0 0i;
    s0 -> s0 1i;
    s0 -> s0 0r;
    s0 -> s0 1r;
    s0 -> s0 0c1;
    s0 -> s0 0c2;
    s0 -> s0 0c3;
    s0 -> s0 1c1;
    s0 -> s0 1c2;
    s0 -> s0 1c3;

    accepting: s0;

}

P1 {
    init: si;

    si -> s0 E;
    s0 -> s0 0i;
    s0 -> s0 1i;
    s0 -> s0 0r;
    s0 -> s0 1r;
    s0 -> s0 0c1;
    s0 -> s0 0c2;
    s0 -> s0 0c3;
    s0 -> s0 1c1;
    s0 -> s0 1c2;
    s0 -> s0 1c3;

    accepting: s0;

}


transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;
