// nim.txt
//
// This is the standard nim game. There are three piles of chips containing 
// x1, x2, and x3 chips respectively. Two players take turns moving. 
// Each move consists of selecting one of the piles and removing chips from it. 
// You may not remove chips from more than one pile in one turn, but from the 
// pile you selected you may remove as many chips as desired, from one chip to 
// the whole pile. The winner is the player who removes the last chip.
//
// For more info on the game, please check the online book Combinatorial Game 
// Theory by Thomas S. Ferguson. 
//
// The property that we prove for nim games in this model is that, starting from
// configurations (i.e. triple (x1,x2,x3)) whose *nim-sum* is 0, Player 2 
// has a winning strategy.
//
// In our encoding as parameterised reachability game:
// Numbers are encoded in binary - most significant digit first


// Notice that for nim-sum to be 0, then every binary position the three
// number must sum up to 0.
Initial {
    init: si;

    si -> s0 E;
    s0 -> s0 000;
    s0 -> s0 101;
    s0 -> s0 011;
    s0 -> s0 110;

    accepting: s0;
}    

Transition {
    init: si;

    // Empty P0
    si -> s0;
    s0 -> s1 S/E; 
    s1 -> s1 000/000;

    // Empty P1
    si -> e0;
    e0 -> e1 E/E; 
    e1 -> e1 000/000;


    // Nonempty: first pile P1
    si -> p0;
    p0 -> p1 E/S;
    p1 -> p1 000/000;
    p1 -> p1 001/001;
    p1 -> p1 010/010;
    p1 -> p1 011/011;
    p1 -> p1 100/100;
    p1 -> p1 101/101;
    p1 -> p1 110/110;
    p1 -> p1 111/111;

        // the first digit where the number differs (and has to decrease)
    p1 -> p2 100/000;
    p1 -> p2 101/001;
    p1 -> p2 110/010;
    p1 -> p2 111/011;

        // after this, it doesn't matter
    p2 -> p2 000/000;
    p2 -> p2 001/001;
    p2 -> p2 010/010;
    p2 -> p2 011/011;
    p2 -> p2 100/100;
    p2 -> p2 101/101;
    p2 -> p2 110/110;
    p2 -> p2 111/111;

    p2 -> p2 000/100;
    p2 -> p2 001/101;
    p2 -> p2 010/110;
    p2 -> p2 011/111;
    p2 -> p2 100/000;
    p2 -> p2 101/001;
    p2 -> p2 110/010;
    p2 -> p2 111/011;

    // Nonempty: second pile P1
    si -> q0;
    q0 -> q1 E/S;
    q1 -> q1 000/000;
    q1 -> q1 001/001;
    q1 -> q1 010/010;
    q1 -> q1 011/011;
    q1 -> q1 100/100;
    q1 -> q1 101/101;
    q1 -> q1 110/110;
    q1 -> q1 111/111;

        // the first digit where the number differs (and has to decrease)
    q1 -> q2 010/000;
    q1 -> q2 011/001;
    q1 -> q2 110/100;
    q1 -> q2 111/101;

        // after this, it doesn't matter
    q2 -> q2 000/000;
    q2 -> q2 001/001;
    q2 -> q2 010/010;
    q2 -> q2 011/011;
    q2 -> q2 100/100;
    q2 -> q2 101/101;
    q2 -> q2 110/110;
    q2 -> q2 111/111;

    q2 -> q2 000/010;
    q2 -> q2 001/011;
    q2 -> q2 100/110;
    q2 -> q2 101/111;
    q2 -> q2 010/000;
    q2 -> q2 011/001;
    q2 -> q2 110/100;
    q2 -> q2 111/101;

    // Nonempty: third pile P1
    si -> r0;
    r0 -> r1 E/S;
    r1 -> r1 000/000;
    r1 -> r1 001/001;
    r1 -> r1 010/010;
    r1 -> r1 011/011;
    r1 -> r1 100/100;
    r1 -> r1 101/101;
    r1 -> r1 110/110;
    r1 -> r1 111/111;

        // the first digit where the number differs (and has to decrease)
    r1 -> r2 001/000;
    r1 -> r2 011/010;
    r1 -> r2 101/100;
    r1 -> r2 111/110;

        // after this, it doesn't matter
    r2 -> r2 000/000;
    r2 -> r2 001/001;
    r2 -> r2 010/010;
    r2 -> r2 011/011;
    r2 -> r2 100/100;
    r2 -> r2 101/101;
    r2 -> r2 110/110;
    r2 -> r2 111/111;

    r2 -> r2 000/001;
    r2 -> r2 010/011;
    r2 -> r2 100/101;
    r2 -> r2 110/111;
    r2 -> r2 001/000;
    r2 -> r2 011/010;
    r2 -> r2 101/100;
    r2 -> r2 111/110;

    // Nonempty: first pile P0
    si -> a0;
    a0 -> a1 S/E;
    a1 -> a1 000/000;
    a1 -> a1 001/001;
    a1 -> a1 010/010;
    a1 -> a1 011/011;
    a1 -> a1 100/100;
    a1 -> a1 101/101;
    a1 -> a1 110/110;
    a1 -> a1 111/111;

        // the first digit where the number differs (and has to decrease)
    a1 -> a2 100/000;
    a1 -> a2 101/001;
    a1 -> a2 110/010;
    a1 -> a2 111/011;

        // after this, it doesn't matter
    a2 -> a2 000/000;
    a2 -> a2 001/001;
    a2 -> a2 010/010;
    a2 -> a2 011/011;
    a2 -> a2 100/100;
    a2 -> a2 101/101;
    a2 -> a2 110/110;
    a2 -> a2 111/111;

    a2 -> a2 000/100;
    a2 -> a2 001/101;
    a2 -> a2 010/110;
    a2 -> a2 011/111;
    a2 -> a2 100/000;
    a2 -> a2 101/001;
    a2 -> a2 110/010;
    a2 -> a2 111/011;

    // Nonempty: second pile P1
    si -> b0;
    b0 -> b1 S/E;
    b1 -> b1 000/000;
    b1 -> b1 001/001;
    b1 -> b1 010/010;
    b1 -> b1 011/011;
    b1 -> b1 100/100;
    b1 -> b1 101/101;
    b1 -> b1 110/110;
    b1 -> b1 111/111;

        // the first digit where the number differs (and has to decrease)
    b1 -> b2 010/000;
    b1 -> b2 011/001;
    b1 -> b2 110/100;
    b1 -> b2 111/101;

        // after this, it doesn't matter
    b2 -> b2 000/000;
    b2 -> b2 001/001;
    b2 -> b2 010/010;
    b2 -> b2 011/011;
    b2 -> b2 100/100;
    b2 -> b2 101/101;
    b2 -> b2 110/110;
    b2 -> b2 111/111;

    b2 -> b2 000/010;
    b2 -> b2 001/011;
    b2 -> b2 100/110;
    b2 -> b2 101/111;
    b2 -> b2 010/000;
    b2 -> b2 011/001;
    b2 -> b2 110/100;
    b2 -> b2 111/101;

    // Nonempty: third pile P1
    si -> c0;
    c0 -> c1 S/E;
    c1 -> c1 000/000;
    c1 -> c1 001/001;
    c1 -> c1 010/010;
    c1 -> c1 011/011;
    c1 -> c1 100/100;
    c1 -> c1 101/101;
    c1 -> c1 110/110;
    c1 -> c1 111/111;

        // the first digit where the number differs (and has to decrease)
    c1 -> c2 001/000;
    c1 -> c2 011/010;
    c1 -> c2 101/100;
    c1 -> c2 111/110;

        // after this, it doesn't matter
    c2 -> c2 000/000;
    c2 -> c2 001/001;
    c2 -> c2 010/010;
    c2 -> c2 011/011;
    c2 -> c2 100/100;
    c2 -> c2 101/101;
    c2 -> c2 110/110;
    c2 -> c2 111/111;

    c2 -> c2 000/001;
    c2 -> c2 010/011;
    c2 -> c2 100/101;
    c2 -> c2 110/111;
    c2 -> c2 001/000;
    c2 -> c2 011/010;
    c2 -> c2 101/100;
    c2 -> c2 111/110;

    accepting: s1, e1, p2, q2, r2, a2, b2, c2;
}

Bad {
    init: s0;

    s0 -> s1 S;
    s1 -> s1 000;
    accepting: s1;
}

P0 {
    init: si;

    si -> s0 S;
    s0 -> s0 000;
    s0 -> s0 001;
    s0 -> s0 010;
    s0 -> s0 011;
    s0 -> s0 100;
    s0 -> s0 101;
    s0 -> s0 110;
    s0 -> s0 111;

    accepting: s0;

}

P1 {
    init: si;

    si -> s0 E;
    s0 -> s0 000;
    s0 -> s0 001;
    s0 -> s0 010;
    s0 -> s0 011;
    s0 -> s0 100;
    s0 -> s0 101;
    s0 -> s0 110;
    s0 -> s0 111;

    accepting: s0;

}



transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;
