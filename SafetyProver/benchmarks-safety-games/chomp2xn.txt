// chomp.txt

Initial {
    init: si;

    si -> s0 S;
    s0 -> s1 2;
    s1 -> s1 2;
    s1 -> s2 0;

    accepting: s2;
}    

Transition {
    init: si;
    // P1 transitions
    si -> ss E/S;
    si -> sl E/E;
    // P0 transitions
    si -> ss S/E;
    si -> sl S/S;
    // Winning/Losing turn
    sl -> s0 0/0; 
    sl -> s0 1/0;
    sl -> s0 2/0;  
    // go to self loop state if 0 is read first
    s0 -> s0 0/0;
    s0 -> s0 1/0;
    s0 -> s0 2/0;

    // read 1's and eventually chomp 1 to a 0 and all following 1's
    ss -> s1 1/1;
    s1 -> s1 1/1;
    s1 -> s11 1/0;
    s11 -> s11 1/0;
    s11 -> s0 0/0;

    // first 2 can be read and changed into 1 or 0
    ss -> s2 2/2;
    ss -> s21 2/1;
    s2 -> s2 2/2;
    s2 -> s1;
    // change 2 into 1
    s2 -> s21 2/1;
    // change 2 into 0
    s2 -> s20 2/0;
    s21 -> s21 2/1;
    s21 -> s211;
    s211 -> s211 1/1;
    s211 -> s0 0/0;
    s20 -> s20 2/0;
    s20 -> s11 1/0;
    s20 -> s0 0/0;
    accepting: s0;
}

Bad {
    init: s0;

    s0 -> s1 S;
    s1 -> s2 0;
    s2 -> s2 0;
    accepting: s2;
}

P0 {
    init: si;

    si -> s0 S;
    s0 -> s1 1;
    s0 -> s2 2;
    s0 -> s4 0;
    // after reading 1 0, only add more 0's or accept
    s4 -> s4 0; 
    // after reading 1 1, only add more 1's or go down to 0's
    s1 -> s1 1;
    s1 -> s4 0;
    // after reading 1 2, only add more 2's or go down
    s2 -> s2 2;
    s2 -> s1 1;
    s2 -> s4 0;
    accepting: s4;

}

P1 {
        init: si;

    si -> s0 E;
    s0 -> s1 1;
    s0 -> s2 2;
    s0 -> s4 0;
    // after reading 1 0, only add more 0's or accept
    s4 -> s4 0; 
    // after reading 1 1, only add more 1's or go down to 0's
    s1 -> s1 1;
    s1 -> s4 0;
    // after reading 1 2, only add more 2's or go down
    s2 -> s2 2;
    s2 -> s1 1;
    s2 -> s4 0;
    accepting: s4;

}



transducerStateGuessing: 1 .. 10;
automatonStateGuessing: 0 .. 4;
